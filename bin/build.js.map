{"version":3,"sources":["clean.ts","bundle.ts","assets.ts","build.ts"],"names":[],"mappings":";AAGA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAHA,MAAA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,QAEO,eAAe,UACZ,EAAA,QAAM,cACN,EAAA,QAAI,UAFd,QAAA,MAAA;;ACSA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAZA,MAAA,EAAA,EAAA,QAAA,mBAEM,EAAa,CAAC,gBAAiB,qBAE/B,EAAU,CACZ,OAAO,EACP,OAAQ,UACR,KAAK,EACL,gBAAgB,EAChB,aAAa,GAGV,eAAe,EAAO,GACrB,IACA,EAAQ,OAAQ,EAChB,EAAQ,gBAAiB,GAGvB,MAAA,EAAU,IAAI,EAAA,QAAQ,EAAY,SAElC,EAAQ,SARlB,QAAA,OAAA;;ACPA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EALA,MAAA,EAAA,EAAA,QAAA,QAEM,EAAM,sBACN,EAAO,OAEb,SAAgB,EAAO,GACf,GAAA,EACA,EAAA,QAAI,SAAS,EAAK,OACf,CACY,EAAA,QAAI,MAAM,EAAK,GACxB,GAAG,OAAS,GAAM,QAAQ,IAAI,EAAE,QAAS,YAAa,EAAE,WALtE,QAAA,OAAA;;ACWI,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhBJ,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,YACA,EAAA,QAAA,YAEA,eAAe,IACX,QAAQ,IAAI,SAAW,QAAQ,KAAK,GAC9B,MAAA,EAA2B,eAApB,QAAQ,KAAK,GAE1B,QAAQ,IAAI,qBACN,EAAA,QACN,QAAQ,IAAI,qBACZ,EAAA,OAAO,GACP,QAAQ,IAAI,4BACN,EAAA,OAAO,GAGjB","file":"build.js","sourceRoot":"","sourcesContent":["import mkdir from \"make-dir\";\nimport del from \"del\";\n\nexport async function clean(): Promise<void> {\n    await mkdir(\"dist\");\n    await del(\"dist/*\");\n}\n","import Bundler from \"parcel-bundler\";\n\nconst entryFiles = [\"src/**/*.html\", \"src/background.ts\"];\n\nconst options = {\n    watch: true,\n    target: \"browser\",\n    hmr: false,\n    detailedReport: false,\n    autoInstall: false\n};\n\nexport async function bundle(production: boolean): Promise<void> {\n    if (production) {\n        options.watch = false;\n        options.detailedReport = true;\n    }\n\n    const bundler = new Bundler(entryFiles, options);\n\n    await bundler.bundle();\n}\n","import cpx from \"cpx\";\n\nconst src = \"src/**/*.{json,png}\";\nconst dest = \"dist\";\n\nexport function assets(production: boolean): void {\n    if (production) {\n        cpx.copySync(src, dest);\n    } else {\n        const watch  = cpx.watch(src, dest);\n        watch.on(\"copy\", (e) => console.log(e.srcPath, \"copied to\", e.dstPath));\n    }\n}\n","import { clean } from \"./clean\";\nimport { bundle } from \"./bundle\";\nimport { assets } from \"./assets\";\n\nasync function main(): Promise<void> {\n    process.env.NODE_ENV = process.argv[2];\n    const prod = process.argv[2] === \"production\";\n\n    console.log(\"Cleaning...\");\n    await clean();\n    console.log(\"Copying assets...\");\n    assets(prod);\n    console.log(\"Building bundle...\");\n    await bundle(prod);\n}\n\nmain();\n"]}